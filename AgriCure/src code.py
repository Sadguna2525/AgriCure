# -*- coding: utf-8 -*-
"""new.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SmJRwdISqSsDg66OIfVF_ubTg89FV-8s
"""

import random
import numpy as np
import tensorflow as tf
import os    #handle file and dierectory operations
import json
from zipfile import ZipFile
import matplotlib.pyplot as plt  #for visualisation of images
import matplotlib.image as mpimg #to read image
from PIL import Image   # python imaging library-for openining and resizing images
from tensorflow.keras.preprocessing.image import ImageDataGenerator #for loading and augmenting images
from tensorflow.keras import layers,models  #to train and build model

random.seed(0)
np.random.seed(0)
tf.random.set_seed(0)

# Setup Kaggle API to Col
kaggle=json.load(open("kaggle (1).json"))

os.environ['KAGGLE_USERNAME']=kaggle['username']
os.environ['KAGGLE_KEY']=kaggle['key']

import kaggle

!kaggle datasets download -d abdallahalidev/plantvillage-dataset

f1 = ZipFile("plantvillage-dataset.zip")   #extracts dataset to cwd
f1.extractall()
f1.close()

base_dir = "plantvillage dataset/color"

# Setting the base directory to a color folder
ipath="/content/plantvillage dataset/color/Cherry_(including_sour)___Powdery_mildew/012b55cf-de7a-483a-9118-0fd8ff012185___FREC_Pwd.M 0423.JPG"
img=mpimg.imread(ipath)
plt.imshow(img)
plt.axis("off")

img.shape

# Make all the images uniform
img_size=224
batch_size=32
data_gen=ImageDataGenerator(rescale=1./255,validation_split=0.2)  #normalising ixel values for faster training

# validation_split is testing size
train_generator=data_gen.flow_from_directory(base_dir,target_size=(img_size,img_size),batch_size=batch_size,class_mode="categorical",subset="training")

# validation_split is testing size
validation_generator=data_gen.flow_from_directory(base_dir,target_size=(img_size,img_size),batch_size=batch_size,class_mode="categorical",subset="validation")

# Making of neural network
model=models.Sequential()
model.add(layers.Conv2D(32,(3,3),activation='relu',input_shape=(img_size,img_size,3)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(32,(3,3),activation='relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Flatten())
model.add(layers.Dense(256,activation='relu'))
model.add(layers.Dense(train_generator.num_classes,activation='softmax'))

model.summary()

np.array([[1,2,3]]).flatten()

# Pass the data to my network
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

model.fit(train_generator,
          steps_per_epoch=train_generator.samples//batch_size,
          epochs=5,
          validation_data=validation_generator,
          validation_steps=validation_generator.samples//batch_size)

model.save("AgriCure.h5")

# Above line is for savig the model
# Extract the classes from data with indices
data_classes={v:k for k,v in train_generator.class_indices.items()}
print(data_classes)

# Saving key as index and value as disease in above cell
json.dump(data_classes,open("data_classes.json","w"))

def load_preprocess_image(ipath,target_size=(224,224)):
  img=Image.open(ipath)
  img=img.resize(target_size)
  img_array=np.array(img)
  img_array=np.expand_dims(img_array,axis=0)
  img_array=img_array.astype("float32")/255.
  return img_array

# Above cell is for resizing the image
def predict_disease(model,ipath,class_indices):
  preprocess_img=load_preprocess_image(ipath)
  prediction=model.predict(preprocess_img)
  predicted_class_index=np.argmax(prediction,axis=1)[0]
  predicted_class=class_indices[predicted_class_index]
  return predicted_class
  # axis=1 is pulling the data from the column, 0 is the top most class

# Get image path/content/plantvillage dataset/color/Soybean___healthy/00247bff-26dc-445a-8d11-
i1 = "/content/plantvillage dataset/color/Soybean___healthy/0029bef1-201b-4dcc-9f84-d01dfc24785d___RS_HL 6484.JPG"
i2 = "/content/plantvillage dataset/color/Tomato___Tomato_Yellow_Leaf_Curl_Virus/00576ef6-6fa0-40d2-b365-87850597bafd___UF.GRC_YLCV_Lab 01999.JPG"

# Apply the above image to the model
predict_disease(model,i1,data_classes)

predict_disease(model,i2,data_classes)

d={"Apple___Apple_scab":"Captan, mancozeb, sulfur",
"Apple___Black_rot":"Thiophanate-methyl, myclobutanil",
"Apple___Cedar_apple_rust":"Myclobutanil, sulfur-based",
"Cherry_(including_sour)___Powdery_mildew":"Sulfur-based fungicides",
"Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot":"Azoxystrobin, propiconazole",
"Corn_(maize)__Common_rust":"Mancozeb, chlorothalonil",
"Corn_(maize)___Northern_Leaf_Blight":"Pyraclostrobin, trifloxystrobin",
"Grape___Black_rot":"Sulfur, copper, mancozeb",
"Grape___Esca_(Black_Measles)":"Tebuconazole (limited effect)",
"Grape___Leaf_blight_(Isariopsis_Leaf_Spot)":"Copper-based fungicides",
"Orange___Haunglongbing_(Citrus_greening)":"Imidacloprid (vector control)",
"Peach___Bacterial_spot":"Copper-based bactericides",
"Pepper,_bell___Bacterial_spot":"Copper-based sprays",
"Potato___Early_blight":"Mancozeb, chlorothalonil",
"Potato___Late_blight":	"Metalaxyl, cymoxanil",
"Squash___Powdery_mildew":"Sulfur, potassium bicarbonate",
"Strawberry___Leaf_scorch":"Captan, myclobutanil",
"Tomato___Bacterial_spot":"Copper-based bactericides",
"Tomato___Early_blight":"Chlorothalonil, azoxystrobin",
"Tomato___Late_blight":"Metalaxyl, mancozeb",
"Tomato___Leaf_Mold":"Chlorothalonil, copper hydroxide",
"Tomato___Septoria_leaf_spot":"Chlorothalonil, mancozeb",
"Tomato___Spider_mites Two-spotted_spider_mite":"Abamectin, insecticidal soap",
"Tomato___Target_Spot":"Azoxystrobin, chlorothalonil",
"Tomato___Tomato_Yellow_Leaf_Curl_Virus":"Imidacloprid (vector)",
"Tomato___Tomato_mosaic_virus":"it is virus",
}


d1={"Apple___Apple_scab":"Prune trees, remove fallen leaves",
"Apple___Black_rot":"Remove infected fruit, pruning",
"Apple___Cedar_apple_rust":"Remove nearby junipers, use resistant cultivars",
"Cherry_(including_sour)___Powdery_mildew":"Remove infected leaves, prune trees",
"Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot":"Crop rotation, residue management",
"Corn_(maize)__Common_rust":"Resistant varieties, rotation",
"Corn_(maize)___Northern_Leaf_Blight":"Remove debris, use resistant hybrids",
"Grape___Black_rot":"Remove infected canes, prune canopy",
"Grape___Esca_(Black_Measles)":"Remove infected vines, avoid pruning wounds",
"Grape___Leaf_blight_(Isariopsis_Leaf_Spot)":"Good air circulation, leaf removal",
"Orange___Haunglongbing_(Citrus_greening)":"Remove infected trees, biological psyllid control",
"Peach___Bacterial_spot":"Biocontrol with nonpathogenic Xanthomonas",
"Pepper,_bell___Bacterial_spot":"Disease-free seeds, no overhead irrigation",
"Potato___Early_blight":"Neem extract, Trichoderma viride",
"Potato___Late_blight":"Certified seeds, Trichoderma application",
"Squash___Powdery_mildew":"Resistant varieties, good airflow",
"Strawberry___Leaf_scorch":"Remove infected leaves, space plants",
"Tomato___Bacterial_spot":"Disease-free seeds, rotation",
"Tomato___Early_blight":"Clonostachys spp. biocontrol",
"Tomato___Late_blight":"Crop rotation, certified seeds",
"Tomato___Leaf_Mold":"Ventilation, resistant varieties",
"Tomato___Septoria_leaf_spot":"Crop debris removal, staking",
"Tomato___Spider_mites Two-spotted_spider_mite":"Predatory mites, neem oil",
"Tomato___Target_Spot":"Crop debris management, avoid overcrowding",
"Tomato___Tomato_Yellow_Leaf_Curl_Virus":"Remove infected plants, control whiteflies",
"Tomato___Tomato_mosaic_virus":"Sanitize tools, resistant varieties",
}


if predict_disease(model,i2,data_classes) in d:
	print("Recommended pesticide is:",d[predict_disease(model,i2,data_classes)])
if predict_disease(model,i2,data_classes) in d1:
	print("Alternate Biological practices:", d1[predict_disease(model,i2,data_classes)])